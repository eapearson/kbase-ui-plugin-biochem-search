{"version":3,"sources":["Tab.js","Tabs.js","BiochemistryTable.js","common.js","CompoundTable.js","ReactionTable.js","App.js","serviceWorker.js","index.js"],"names":["Tab","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","label","onClick","_this$props2","activeTab","className","react_default","a","createElement","bind","Component","Tabs","_this","state","tab","setState","kids","React","Children","toArray","children","length","_this2","map","child","Tab_Tab","key","onClickTabItem","renderTabs","BiochemistryTable","table_items","search_text","message","event","target","value","keyCode","which","doSearch","axios","get","githubURL","then","response","i","data","_key","id","concat","toLocaleString","_this3","post","relationEngineURL","all_documents","offset","result_limit","include_obsolete","results","loadAll","type","placeholder","onChange","handleChange","onKeyPress","handleKeyPress","handleClick","lib_default","keyField","headerClasses","columns","pagination","paginationFactory","expandRow","compound_image_src","cid","github_url","relation_engine_url","CompoundTable","renderer","row","src","alt","onError","style","listStyleType","abbreviation","deltag","deltagerr","pka","pkb","inchikey","smiles","is_core","is_cofactor","is_obsolete","source","showExpandColumn","onlyOneExpanding","expanded","dataField","text","sort","formatter","imgFormatter","aliasFormatter","cell","height","String","replace","src_BiochemistryTable","ReactionTable","constructor","reactionImage","definition","direction","reversibility","is_transport","comp_txt","_$exec","exec","_$exec2","slicedToArray","stoic","Fragment","compounds","split","renderCompound","reduce","prev","curr","_row$code$split","code","_row$code$split2","reactants","products","sign","renderHalfRxn","App","Tabs_Tabs","src_CompoundTable","src_ReactionTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00f2bce0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Tab extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onClick() {\n        const { label, onClick } = this.props;\n        onClick(label);\n    }\n\n    render() {\n        const { activeTab, label } = this.props;\n\n        let className = 'tab-list-item';\n\n        if (activeTab === label) {\n            className += ' tab-list-active';\n        }\n\n        return (\n            <li className={className} onClick={this.onClick.bind(this)}>\n                {label}\n            </li>\n        );\n    }\n}\n\nTab.propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tab from './Tab';\n\nexport default class Tabs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: null\n        };\n    }\n\n    onClickTabItem(tab) {\n        this.setState({ activeTab: tab });\n    }\n\n    componentDidMount() {\n        const kids = React.Children.toArray(this.props.children);\n        if (kids.length) {\n            this.setState({ activeTab: kids[0].props.label });\n        }\n    }\n\n    renderTabs() {\n        return (\n            <div className=\"tabs\">\n                <ol className=\"tab-list\">\n                    {React.Children.map(this.props.children, (child) => {\n                        const { label } = child.props;\n                        return (\n                            <Tab\n                                activeTab={this.state.activeTab}\n                                key={label}\n                                label={label}\n                                onClick={this.onClickTabItem.bind(this)}\n                            />\n                        );\n                    })}\n                </ol>\n                <div className=\"tab-content\">\n                    {React.Children.map(this.props.children, (child) => {\n                        if (child.props.label === this.state.activeTab) {\n                            return child.props.children;\n                        }\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.children) {\n            return this.renderTabs();\n        }\n    }\n}\n\nTabs.propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport axios from 'axios';\n\nconst ENTER_KEY = 13;\n\nclass BiochemistryTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            table_items: [],\n            search_text: '',\n            message: 'Loading...'\n        };\n    }\n\n    handleChange(event) {\n        this.setState({ search_text: event.target.value });\n    }\n\n    handleKeyPress(event) {\n        if (event.keyCode === ENTER_KEY || event.which === ENTER_KEY) {\n            this.doSearch();\n        }\n    }\n\n    handleClick() {\n        this.doSearch();\n    }\n\n    loadAll() {\n        // This is a bit of a hack but the static compounds file from github has the same content and is MUCH faster to load\n        axios.get(this.props.githubURL).then((response) => {\n            for (let i = 0; i < response.data.length; i++) {\n                response.data[i]._key = response.data[i].id;\n            }\n            this.setState({\n                table_items: response.data,\n                message: `${response.data.length.toLocaleString()} items found`\n            });\n        });\n    }\n\n    doSearch() {\n        if (!this.state.search_text) {\n            this.loadAll();\n        } else {\n            axios\n                .post(this.props.relationEngineURL, {\n                    search_text: this.state.search_text,\n                    all_documents: 0,\n                    offset: 0,\n                    result_limit: 9999999,\n                    include_obsolete: 1\n                })\n                .then((response) => {\n                    this.setState({\n                        table_items: response.data.results,\n                        message: `${response.data.results.length.toLocaleString()} items found`\n                    });\n                });\n        }\n    }\n\n    componentDidMount() {\n        this.loadAll();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h5>{this.state.message}</h5>\n                    </div>\n                    <div className=\"col mb-3 input-group form-inline justify-content-end\">\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            placeholder=\"Search...\"\n                            value={this.state.search_text}\n                            onChange={this.handleChange.bind(this)}\n                            onKeyPress={this.handleKeyPress.bind(this)}\n                        />\n                        <div className=\"input-group-append\" onClick={this.handleClick.bind(this)}>\n                            <button className=\"input-group-text\">\n                                <i className=\"fa fa-search\" />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <BootstrapTable\n                    keyField=\"id\"\n                    headerClasses=\"table-header\"\n                    data={this.state.table_items}\n                    columns={this.props.columns}\n                    pagination={paginationFactory()}\n                    expandRow={this.props.expandRow}\n                />\n            </div>\n        );\n    }\n}\n\nBiochemistryTable.propTypes = {\n    expandRow: PropTypes.object,\n    columns: PropTypes.array,\n    relationEngineURL: PropTypes.string.isRequired,\n    githubURL: PropTypes.string.isRequired\n};\n\nexport default BiochemistryTable;\n","\nexport const compound_image_src = (cid) => {\n    return `http://minedatabase.mcs.anl.gov/compound_images/ModelSEED/${cid}.png`;\n};\nexport const github_url = 'https://raw.githubusercontent.com/ModelSEED/ModelSEEDDatabase/dev/Biochemistry';\nexport const relation_engine_url = 'https://ci.kbase.us/services/relation_engine_api/api/query_results';","import React, { Component } from 'react';\nimport BiochemistryTable from './BiochemistryTable';\nimport { compound_image_src, github_url, relation_engine_url } from './common';\n\nclass CompoundTable extends Component {\n    static imgFormatter(cell) {\n        return (\n            <img\n                src={compound_image_src(cell)}\n                alt=\"\"\n                style={{ height: '100px' }}\n                onError={(i) => (i.target.src = '')}\n            />\n        );\n    }\n\n    static aliasFormatter(cell) {\n        return (\n            <span>\n                {String(cell)\n                    .replace(/\\|/g, ', ')\n                    .replace(/;/g, '\\n')}\n            </span>\n        );\n    }\n\n    constructor(props) {\n        super(props);\n        this.expandRow = {\n            renderer: (row) => {\n                return (\n                    <div className=\"row\">\n                        <div className=\"col-sm-4\">\n                            <img\n                                src={compound_image_src(row.id)}\n                                alt=\"\"\n                                onError={(i) => (i.target.src = '')}\n                                className=\"compound-detail-image\"\n                            />\n                        </div>\n                        <div className=\"col-sm-8\">\n                            <ul style={{ listStyleType: 'none' }}>\n                                <li>\n                                    <strong>Abbreviation:</strong> {row.abbreviation}\n                                </li>\n                                <li>\n                                    <strong>DeltaG:</strong> {row.deltag}\n                                </li>\n                                <li>\n                                    <strong>DeltaG Error:</strong> {row.deltagerr}\n                                </li>\n                                <li>\n                                    <strong>pKa:</strong> {row.pka}\n                                </li>\n                                <li>\n                                    <strong>pKb:</strong> {row.pkb}\n                                </li>\n                                <li>\n                                    <strong>InChIKey:</strong> {row.inchikey}\n                                </li>\n                                <li>\n                                    <strong>SMILES:</strong> {row.smiles}\n                                </li>\n                                <li>\n                                    <strong>Is Core:</strong> {row.is_core}\n                                </li>\n                                <li>\n                                    <strong>Is Cofactor:</strong> {row.is_cofactor}\n                                </li>\n                                <li>\n                                    <strong>Is Obsolete:</strong> {row.is_obsolete}\n                                </li>\n                                <li>\n                                    <strong>Source:</strong> {row.source}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                );\n            },\n            showExpandColumn: true,\n            onlyOneExpanding: true,\n            expanded: []\n        };\n\n        this.state = {\n            table_items: [],\n            search_text: '',\n            message: 'Loading...',\n            columns: [\n                {\n                    dataField: '_key',\n                    text: 'ID',\n                    sort: true\n                },\n                {\n                    dataField: 'id',\n                    text: 'Image',\n                    formatter: CompoundTable.imgFormatter\n                },\n                {\n                    dataField: 'name',\n                    text: 'Name',\n                    sort: true\n                },\n                {\n                    dataField: 'formula',\n                    text: 'Formula',\n                    sort: true\n                },\n                {\n                    dataField: 'mass',\n                    text: 'Mass',\n                    sort: true\n                },\n                {\n                    dataField: 'charge',\n                    text: 'Charge',\n                    sort: true\n                },\n                {\n                    dataField: 'aliases',\n                    text: 'Aliases',\n                    formatter: CompoundTable.aliasFormatter\n                }\n            ]\n        };\n    }\n\n    render() {\n        return (\n            <BiochemistryTable\n                columns={this.state.columns}\n                expandRow={this.expandRow}\n                githubURL={`${github_url}/compounds.json`}\n                relationEngineURL={`${relation_engine_url}/?view=search_compounds&batch_size=9999999`}\n            />\n        );\n    }\n}\n\nexport default CompoundTable;\n","import React, { Component } from 'react';\nimport BiochemistryTable from './BiochemistryTable';\nimport { compound_image_src, github_url, relation_engine_url } from './common';\n\nclass ReactionTable extends Component {\n    static aliasFormatter(cell) {\n        return (\n            <span>\n                {String(cell)\n                    .replace(/\\|/g, ', ')\n                    .replace(/;/g, '\\n')}\n            </span>\n        );\n    }\n\n    static renderCompound(comp_txt) {\n        const [, stoic, cid] = /(\\([0-9.]+\\)) (\\w+)/.exec(comp_txt);\n        return (\n            <React.Fragment key={comp_txt}>\n                <div className={'col-md-auto p-0'}>{stoic}</div>\n                <div className={'col-md-auto'}>\n                    <img\n                        src={compound_image_src(cid)}\n                        alt=\"\"\n                        style={{ height: '110px' }}\n                        onError={(i) => (i.target.src = '')}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    static renderHalfRxn(compounds) {\n        return compounds\n            .split('+')\n            .map((i) => {\n                return this.constructor.renderCompound(i);\n            })\n            .reduce((prev, curr) => [\n                prev,\n                <h4 key={curr} className=\"col-md-auto\">\n                    {' '}\n                    +{' '}\n                </h4>,\n                curr\n            ]);\n    }\n\n    static reactionImage(row) {\n        const [reactants, products] = row.code.split(' <=> ');\n        let sign = '↔';\n        if (row.direction === '>') {\n            sign = '→';\n        } else if (row.direction === '<') {\n            sign = '←';\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"row align-items-center\">\n                    {this.constructor.renderHalfRxn(reactants)}\n                    <h4 className=\"col-md-auto\">{sign}</h4>\n                </div>\n                <div className=\"row align-items-center\">{this.constructor.renderHalfRxn(products)}</div>\n            </div>\n        );\n    }\n\n    constructor(props) {\n        super(props);\n        this.expandRow = {\n            renderer: (row) => {\n                return (\n                    <div className=\"row\">\n                        <div className=\"col-sm\">{this.constructor.reactionImage(row)}</div>\n                        <div className=\"col-sm\">\n                            <ul style={{ listStyleType: 'none' }}>\n                                <li>\n                                    <strong>Abbreviation:</strong> {row.abbreviation}\n                                </li>\n                                <li>\n                                    <strong>Reaction definition:</strong> {row.definition}\n                                </li>\n                                <li>\n                                    <strong>DeltaG:</strong> {row.deltag}\n                                </li>\n                                <li>\n                                    <strong>DeltaG Error:</strong> {row.deltagerr}\n                                </li>\n                                <li>\n                                    <strong>Direction:</strong> {row.direction}\n                                </li>\n                                <li>\n                                    <strong>Reversibility:</strong> {row.reversibility}\n                                </li>\n                                <li>\n                                    <strong>Is Transport:</strong> {row.is_transport}\n                                </li>\n                                <li>\n                                    <strong>Is Obsolete:</strong> {row.is_obsolete}\n                                </li>\n                                <li>\n                                    <strong>Source:</strong> {row.source}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                );\n            },\n            showExpandColumn: true,\n            onlyOneExpanding: true,\n            expanded: []\n        };\n\n        this.state = {\n            table_items: [],\n            search_text: '',\n            columns: [\n                {\n                    dataField: 'id',\n                    text: 'ID',\n                    sort: true\n                },\n                {\n                    dataField: 'name',\n                    text: 'Name',\n                    sort: true\n                },\n                {\n                    dataField: 'equation',\n                    text: 'Equation'\n                },\n                {\n                    dataField: 'deltag',\n                    text: 'deltaG',\n                    sort: true\n                },\n                {\n                    dataField: 'status',\n                    text: 'Status',\n                    sort: true\n                },\n                {\n                    dataField: 'aliases',\n                    text: 'Aliases',\n                    formatter: this.constructor.aliasFormatter\n                }\n            ]\n        };\n    }\n\n    render() {\n        return (\n            <BiochemistryTable\n                columns={this.state.columns}\n                expandRow={this.expandRow}\n                githubURL={`${github_url}/reactions.json`}\n                relationEngineURL={`${relation_engine_url}/?view=search_reactions&batch_size=9999999`}\n            />\n        );\n    }\n}\n\nexport default ReactionTable;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport Tabs from './Tabs';\nimport CompoundTable from './CompoundTable';\nimport ReactionTable from './ReactionTable';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"container m-3 p-0\">\n                <Tabs>\n                    <div label=\"Compounds\">\n                        <CompoundTable />\n                    </div>\n                    <div label=\"Reactions\">\n                        <ReactionTable />\n                    </div>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}